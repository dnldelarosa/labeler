[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Adatar Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/labeler.html","id":"labelled-data-in-r","dir":"Articles","previous_headings":"","what":"Labelled data in R","title":"Easy to use and share labels in R","text":"Historically, software like SPSS, SAS Stata worked labelled data. closest function R base corresponds factors, actually work reverse, assigning values text variables distinct values. able work labelled data one features R users come previously mentioned systems miss . R ecosystem 3 fundamental packages working labelled data haven, labelled y sjlabelled1. However, packages work similar way. expect load previously labelled data assign labels manually variables. work dozen variables, scheme possible. However, number variables grows, scheme becomes difficult handle. even noted operations R remove attributes objects, perhaps labels may even assigned repeatedly. sense, labeler offers new scheme work labelled data R, based : data need pre-labelled manually labelled. purposes dictionary, may received data built fly, used. assignment labels done end pipeline, semi-automated way.","code":""},{"path":"/articles/labeler.html","id":"the-dictionary","dir":"Articles","previous_headings":"","what":"The dictionary","title":"Easy to use and share labels in R","text":"dictionary object consists list contains variables labeled. variables turn, consist lists contain inside: lab: character string describes variable. labs: named vector possible values variable takes. sense, valid dictionary labeler can built displayed follows: Following basic criteria, can create custom dictionary, either building scratch, adding necessary labels variables create analysis.","code":"dict <- list(   GENDER = list(     lab = \"Gender of the person\",     labs = c(\"Man\" = 1, \"Woman\" = 2)   ),   AGE = list(     lab = \"Age of the person\"   ),   SEX = list(     lab = \"link::GENDER\",     labs = \"link::GENDER\"   ),   Married = list(     lab = \"Indicates whether or not the person is married\",     labs = c(\"No\" = 0, \"Yes\" = 1)   ) )"},{"path":"/articles/labeler.html","id":"parsing-the-dictionary","dir":"Articles","previous_headings":"The dictionary","what":"Parsing the dictionary","title":"Easy to use and share labels in R","text":"Working non-ASCII characters R tedious task. labeler offers way work non-ASCII characters dictionaries. purposes parse_dict() function allows parsing dictionary replace characters. Note process necessary dictionary intended saved valid R object, part package example. functions labeler designed reverse automatic forming process.","code":""},{"path":"/articles/labeler.html","id":"browsing-the-dictionary","dir":"Articles","previous_headings":"The dictionary","what":"Browsing the dictionary","title":"Easy to use and share labels in R","text":"Using browse_dict() function, user able interactively consult dictionary order become familiar content.","code":"browse_dict(dict)"},{"path":"/articles/labeler.html","id":"setting-the-labels","dir":"Articles","previous_headings":"","what":"Setting the labels","title":"Easy to use and share labels in R","text":"function set_labels (), main objective take labels variables values available dictionary apply data table dataframe. following basic examples using feature. sake familiarity, call data set enft acronym National Survey Dominican Republic Workforce, hinting way functions used examples way one use working surveys. Notice code just applying set_labels () function data now contains labels can use analysis. hand, important mention indicated description function’s arguments, possible assign data labels specific variables. Compare result previous one notice case GENDER variable contains data labels, indicated function call. paid enough attention output code, noticed data labels never assigned MARRIED variable. , R case-sensitive, means MARRIED stated dataset Married stated dictionary. Fortunately, ignore_case argument set_labels function designed especially purpose. shown , using argument can make labels assigned variable well. However, depending size origin data set dictionary, cautious option, avoid unexpected results. might good idea use argument specifying target variables. Another detail, good observer noticed, use wildcard link:: definition labels SEX variable. case, guess see labels assigned last variable, achieved using wildcard reference labels one variable another. way, create variable uses exactly labels another, much easier add dictionary. course, plausible option create custom dictionary frequently created variables can reuse analysis analysis. Also, reason want overwrite predefined tags dictionary, just need take account structure dictionary make required replacements. example, instead Man / Woman want use abbreviations words, can get code . ##chec Using labels may noticed previous examples, used str() function show changes data, resulting application labels. , even assigned labels, data still looks exactly . point use_labels() function comes play, allows us substitute values variable corresponding labels. can use set_labels() function assign labels point pipeline, use_labels() function later stage use . can, shown easiest way, pass dictionary directly use_labels() function take care calling set_labels() function automatically. Anyway, convenient option assign / use labels summary table data generated. advantage operating smaller number variables. can seen previous example, even though GENDER variable renamed, just assigning ignore_case = TRUE argument, function able assign data labels. case variable MARRIED name changed one present dictionary, function able find corresponding labels. achieved following way, example: Furthermore, regardless variables assigned labels, possible specify want use. possible using vars argument. Note also arguments can combined, arriving desired result. variables contain values dictionary, use_labels() default prevents labels assigned variables prints warning console indicating variables labeled. can assign argument use_labels(..., check = FALSE) labels used regardless values present dictionary, converted NA. sense, best option add dictionary values variable take. just want avoid console warning, use vars argument specify variables labelled, excluding conflicting variables.","code":"enft <- data.frame(   GENDER = c(rep(1, 5), rep(2, 5)),   AGE = c(seq(1, 30, 3)),   SEX = c(rep(1, 5), rep(2, 5)),   MARRIED = c(rep(0, 4), rep(1, 6)) ) str(enft) #> 'data.frame':    10 obs. of  4 variables: #>  $ GENDER : num  1 1 1 1 1 2 2 2 2 2 #>  $ AGE    : num  1 4 7 10 13 16 19 22 25 28 #>  $ SEX    : num  1 1 1 1 1 2 2 2 2 2 #>  $ MARRIED: num  0 0 0 0 1 1 1 1 1 1  str(set_labels(enft, dict = dict)) #> 'data.frame':    10 obs. of  4 variables: #>  $ GENDER : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Man\" \"Woman\" #>  $ AGE    : num  1 4 7 10 13 16 19 22 25 28 #>  $ SEX    : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Man\" \"Woman\" #>  $ MARRIED: num  0 0 0 0 1 1 1 1 1 1 str(set_labels(enft, dict = dict, vars = c(\"GENDER\"))) #> 'data.frame':    10 obs. of  4 variables: #>  $ GENDER : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Man\" \"Woman\" #>  $ AGE    : num  1 4 7 10 13 16 19 22 25 28 #>  $ SEX    : num  1 1 1 1 1 2 2 2 2 2 #>  $ MARRIED: num  0 0 0 0 1 1 1 1 1 1 str(set_labels(enft, dict = dict, ignore_case = T)) #> 'data.frame':    10 obs. of  4 variables: #>  $ GENDER : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Man\" \"Woman\" #>  $ AGE    : num  1 4 7 10 13 16 19 22 25 28 #>  $ SEX    : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Man\" \"Woman\" #>  $ MARRIED: num  0 0 0 0 1 1 1 1 1 1 #>   ..- attr(*, \"label\")= chr \"Indicates whether or not the person is married\" #>   ..- attr(*, \"labels\")= Named num [1:2] 0 1 #>   .. ..- attr(*, \"names\")= chr [1:2] \"No\" \"Yes\" dict[[\"SEX\"]]$labs <- c(\"M\" = 1, \"W\" = 2)  str(set_labels(enft, dict = dict, vars = c(\"SEX\"))) #> 'data.frame':    10 obs. of  4 variables: #>  $ GENDER : num  1 1 1 1 1 2 2 2 2 2 #>  $ AGE    : num  1 4 7 10 13 16 19 22 25 28 #>  $ SEX    : num  1 1 1 1 1 2 2 2 2 2 #>   ..- attr(*, \"label\")= chr \"Gender of the person\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"M\" \"W\" #>  $ MARRIED: num  0 0 0 0 1 1 1 1 1 1 use_labels(enft, dict = dict, ignore_case = T) #>    GENDER AGE SEX MARRIED #> 1     Man   1   M      No #> 2     Man   4   M      No #> 3     Man   7   M      No #> 4     Man  10   M      No #> 5     Man  13   M     Yes #> 6   Woman  16   W     Yes #> 7   Woman  19   W     Yes #> 8   Woman  22   W     Yes #> 9   Woman  25   W     Yes #> 10  Woman  28   W     Yes enft %>%    dplyr::group_by(     gender = GENDER,     united = MARRIED   ) %>%    dplyr::count() %>%    set_labels(dict = dict, ignore_case = T) %>%    use_labels(NULL) #> # A tibble: 3 × 3 #> # Groups:   gender, united [3] #>   gender united     n #>   <fct>   <dbl> <int> #> 1 Man         0     4 #> 2 Man         1     1 #> 3 Woman       1     5 enft %>%    dplyr::group_by(     gender = GENDER,      married = MARRIED     ) %>%    dplyr::count() %>%    use_labels(dict = dict, ignore_case = T) %>%    dplyr::rename(\"united\" = \"married\") #> # A tibble: 3 × 3 #> # Groups:   gender, united [3] #>   gender united     n #>   <fct>  <fct>  <int> #> 1 Man    No         4 #> 2 Man    Yes        1 #> 3 Woman  Yes        5 enft %>%    dplyr::group_by(     gender = GENDER,      married = MARRIED     ) %>%    dplyr::count() %>%    use_labels(dict = dict, vars = c(\"gender\"), ignore_case = T) %>%    dplyr::rename(\"united\" = \"married\") #> # A tibble: 3 × 3 #> # Groups:   gender, united [3] #>   gender united     n #>   <fct>   <dbl> <int> #> 1 Man         0     4 #> 2 Man         1     1 #> 3 Woman       1     5 enft %>%    dplyr::group_by(     GENDER,      SEX = SEX + 1     ) %>%    dplyr::count() %>%    use_labels(dict = dict) #> Warning in use_labels(., dict = dict): The following (1) variables contain values #>       that are not in the dictionary and were not labeled:  #> SEX. #>       Please see \"https://adatar-do.github.io/labeler/articles/labeler.html\" for more details. #> # A tibble: 2 × 3 #> # Groups:   GENDER, SEX [2] #>   GENDER   SEX     n #>   <fct>  <dbl> <int> #> 1 Man        2     5 #> 2 Woman      3     5"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel E. de la Rosa. Author, maintainer. Adatar. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de la Rosa D (2021). labeler: Easy use share data labels R. R package version 0.4.1, https://github.com/adatar-/labeler.","code":"@Manual{,   title = {labeler: Easy to use and share data labels in R},   author = {Daniel E. {de la Rosa}},   year = {2021},   note = {R package version 0.4.1},   url = {https://github.com/adatar-do/labeler}, }"},{"path":"/index.html","id":"labeler-","dir":"","previous_headings":"","what":"Easy to use and share data labels in R","title":"Easy to use and share data labels in R","text":"package contains functions assign use data labels easy efficient way. easy--share structure.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy to use and share data labels in R","text":"labeler available CRAN. can install development version GitHub :","code":"tryCatch(   library(remotes),   error = function(e){     install.packages('remotes')   } ) remotes::install_github(\"adatar-do/labeler\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Easy to use and share data labels in R","text":"feedback want contribute? Please take look contributing guidelines filing issue pull request. Please note labeler project released Contributor Code Conduct. contributing project, agree abide terms. Get started","code":""},{"path":"/reference/browse_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse dictionary\n — browse_dict","title":"Browse dictionary\n — browse_dict","text":"Allows browse dictionary surveys web interface can check name label variables, well data labels.","code":""},{"path":"/reference/browse_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse dictionary\n — browse_dict","text":"","code":"browse_dict(dict, ...)"},{"path":"/reference/browse_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse dictionary\n — browse_dict","text":"dict database dictionary ... testing purposes","code":""},{"path":"/reference/browse_dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse dictionary\n — browse_dict","text":"web interface data contained supplied dictionary","code":""},{"path":"/reference/browse_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse dictionary\n — browse_dict","text":"","code":"if (FALSE) { dict <- list(   SEX = list(     lab = \"Sex of the person\",     labs = c(\"Man\" = 1, \"Woman\" = 2)   ),   MARITAL_STATUS = list(     lab = \"Marital status of the person\",     labs = c(\"Single\" = 1, \"Married\" = 2, \"Widower\" = 3)   ),   HEIGHT = list(     lab = \"Person height\",     labs = c(\"Short\" = 1, \"Normal\" = 2, \"High\" = 3)   ) ) browse_dict(dict) }"},{"path":"/reference/parse_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","title":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","text":"Replace non ASCII characters ASCII equivalents","code":""},{"path":"/reference/parse_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","text":"","code":"parse_dict(dict)"},{"path":"/reference/parse_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","text":"dict dictionary. See vignette('labeler', package = \"labeler\") details.","code":""},{"path":"/reference/parse_dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","text":"dictionary non ASCII characters replaced ASCII","code":""},{"path":"/reference/parse_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace non ASCII characters with ASCII equivalents\n — parse_dict","text":"","code":"if (FALSE) {    dict = list(              MARRIED = list(                \"Sí\" = 1,                \"No\" = 2              )            )    parse_dict(dict)  }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/set_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign data labels to specified variables\n — set_labels","title":"Assign data labels to specified variables\n — set_labels","text":"Assign data labels specified variables","code":""},{"path":"/reference/set_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign data labels to specified variables\n — set_labels","text":"","code":"set_labels(tbl, dict, vars = NULL, ignore_case = FALSE)"},{"path":"/reference/set_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign data labels to specified variables\n — set_labels","text":"tbl data.frame: Data.frame data dict data.frame: Dictionary data labels use vars character: specified, labels assigned variables ignore_case logical: Indicate case sensitive ignored.","code":""},{"path":"/reference/set_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign data labels to specified variables\n — set_labels","text":"data entered tbl argument data labels","code":""},{"path":[]},{"path":"/reference/set_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign data labels to specified variables\n — set_labels","text":"","code":"if (FALSE) { dict <- list(   SEX = list(     lab = \"Sex of the person\",     labs = c(       \"Man\" = 1,       \"Woman\" = 2     )   ) ) df <- data.frame(SEX = c(1, 2)) str(df) str(set_labels(df, dict = dict)) }"},{"path":"/reference/use_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the data labels of a variable instead of its values\n — use_labels","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"Use data labels variable instead values","code":""},{"path":"/reference/use_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"","code":"use_labels(tbl, dict, vars = NULL, ignore_case = F, check = TRUE)"},{"path":"/reference/use_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"tbl data.frame: Data.frame data dict data.frame: Dictionary data labels use yet assigned. See Details vars character: specified, labels assigned variables ignore_case logical: Indicate case sensitive ignored check logical: TRUE (default), function check values present variable valid data labels dictionary.","code":""},{"path":"/reference/use_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"data supplied tbl argument, instead values using corresponding data labels","code":""},{"path":"/reference/use_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"function assumes data labels assigned data , unless dict supplied, case latter used assign use data labels.","code":""},{"path":[]},{"path":"/reference/use_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the data labels of a variable instead of its values\n — use_labels","text":"","code":"if (FALSE) { dict <- list(   SEX = list(     lab = \"Sex of the person\",     labs = c(       \"Man\" = 1,       \"Woman\" = 2     )   ) ) enft <- data.frame(SEX = c(1, 2)) enft use_labels(enft, dict = dict) }"}]
